{"version":"2.1.0","runs":[{"invocations":[{"executionSuccessful":true,"toolExecutionNotifications":[]}],"results":[{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Dockerfile","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":22,"snippet":{"text":"CMD [ \"python\", \"./dsvpwa.py\" , \"--host\", \"0.0.0.0\" ]"},"startColumn":1,"startLine":22}}}],"message":{"text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"properties":{},"ruleId":"dockerfile.security.missing-user.missing-user"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%"},"region":{"endColumn":113,"endLine":39,"snippet":{"text":"            cursor.execute(\"SELECT id, username, firstname, lastname, email, session FROM users WHERE id=\" + id)"},"startColumn":13,"startLine":39}}}],"message":{"text":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."},"properties":{},"ruleId":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":167,"snippet":{"text":"                    shell=True,"},"startColumn":27,"startLine":167}}}],"message":{"text":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."},"properties":{},"ruleId":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":185,"snippet":{"text":"        payload = base64.urlsafe_b64encode(pickle.dumps(dict(one=1, two=2, three=3))).decode()"},"startColumn":44,"startLine":185}}}],"message":{"text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"properties":{},"ruleId":"python.lang.security.deserialization.pickle.avoid-pickle"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%"},"region":{"endColumn":68,"endLine":187,"snippet":{"text":"        payload = base64.urlsafe_b64encode(pickle.dumps(self.RCE())).decode()"},"startColumn":44,"startLine":187}}}],"message":{"text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"properties":{},"ruleId":"python.lang.security.deserialization.pickle.avoid-pickle"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":199,"snippet":{"text":"            content = str(pickle.loads(base64.urlsafe_b64decode(object)))"},"startColumn":27,"startLine":199}}}],"message":{"text":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."},"properties":{},"ruleId":"python.lang.security.deserialization.pickle.avoid-pickle"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":213,"snippet":{"text":"                file = urllib.request.urlopen(path)"},"startColumn":24,"startLine":213}}}],"message":{"text":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."},"properties":{},"ruleId":"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%"},"region":{"endColumn":125,"endLine":289,"snippet":{"text":"                    cursor.execute(\"SELECT * FROM users WHERE username='\" +  username + \"' AND password='\" + password + \"'\")"},"startColumn":21,"startLine":289}}}],"message":{"text":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."},"properties":{},"ruleId":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%"},"region":{"endColumn":27,"endLine":185,"snippet":{"text":"                shell=True,"},"startColumn":23,"startLine":185}}}],"message":{"text":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."},"properties":{},"ruleId":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"ssl/key.pem","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":2,"snippet":{"text":"-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+GH7Xn9dP/Q3w"},"startColumn":1,"startLine":1}}}],"message":{"text":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."},"properties":{},"ruleId":"generic.secrets.security.detected-private-key.detected-private-key"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"static/js/custom.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":181,"endLine":9,"snippet":{"text":"    document.write('<div style=\\\"position: absolute; top: 5px; right: 5px;\\\">Chosen language: <b>' + decodeURIComponent(document.location.hash.substring(index + 5)) + '</b></div>');"},"startColumn":5,"startLine":9}}}],"message":{"text":"Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL."},"properties":{},"ruleId":"javascript.browser.security.dom-based-xss.dom-based-xss"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"static/js/custom.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":181,"endLine":9,"snippet":{"text":"    document.write('<div style=\\\"position: absolute; top: 5px; right: 5px;\\\">Chosen language: <b>' + decodeURIComponent(document.location.hash.substring(index + 5)) + '</b></div>');"},"startColumn":5,"startLine":9}}}],"message":{"text":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"},"properties":{},"ruleId":"javascript.browser.security.insecure-document-method.insecure-document-method"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"static/js/custom.js","uriBaseId":"%SRCROOT%"},"region":{"endColumn":180,"endLine":9,"snippet":{"text":"    document.write('<div style=\\\"position: absolute; top: 5px; right: 5px;\\\">Chosen language: <b>' + decodeURIComponent(document.location.hash.substring(index + 5)) + '</b></div>');"},"startColumn":20,"startLine":9}}}],"message":{"text":"User controlled data in a HTML string may result in XSS"},"properties":{},"ruleId":"javascript.browser.security.raw-html-concat.raw-html-concat"}],"tool":{"driver":{"name":"Semgrep OSS","semanticVersion":"1.100.0"}}}],"$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json"}